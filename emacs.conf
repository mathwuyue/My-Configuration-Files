;; load path of Emacs
(add-to-list 'load-path "~/.emacs.d")
(add-to-list 'load-path "~/.emacs.d/ibus")
(add-to-list 'load-path "~/.emacs.d/python-mode") 

;; Basic Setups
  ;; set up visual bell for emacs
(setq visible-bell t)

  ;; set up ZH input method for emacs
(require 'ibus)
(add-hook 'after-init-hook 'ibus-mode-on)
(ibus-define-common-key ?\C-\s nil)
(ibus-define-common-key ?\S-\s nil)
(global-set-key (kbd "s-SPC") 'ibus-toggle)

  ;; scroll bar on right side
(set-scroll-bar-mode 'right)
  ;; no tool bar
(tool-bar-mode -1)
  ;; no menu bar
;(menu-bar-mode -1)

  ;; emacs fullscreen mode
(defun toggle-fullscreen (&optional f)
  (interactive)
  (let ((current-value (frame-parameter nil 'fullscreen)))
    (set-frame-parameter nil 'fullscreen
			 (if (equal 'fullboth current-value)
			     (if (boundp 'old-fullscreen) old-fullscreen nil)
			   (progn (setq old-fullscreen current-value)
				  'fullboth)))))
(global-set-key [f11] 'toggle-fullscreen)
					;; Make new frames fullscreen by default. Note: this hook doesn't do
					;; anything to the initial frame if it's in your .emacs, since that file is
					;; read _after_ the initial frame is created.
(add-hook 'after-make-frame-functions 'toggle-fullscreen)


;; set up template system
(require 'template)
(template-initialize)

;; CEDET settings
  ;; Load CEDET
(load-file "~/.emacs.d/cedet/common/cedet.el")
   ;; Enable Project Management System
(global-ede-mode 1)
   ;; Semantic Settings
      ;; minimum necessary features.
;;(semantic-load-enable-minimum-features
      ;; enable semantic-minor-mode for navigation in buffer
      ;; enable semantic-mru-bookmark-mode for storing positions for vistied tags
      ;; enable semantic-idle-summary-mode for showing tips about tag under point
;;(semantic-load-enable-code-helpers)
      ;; enable semantic-idle-completion-mode!!
;;(semantic-load-enable-gaudy-code-helpers)
      ;; enable which-func-mode, that shows name of current function in status line.
(semantic-load-enable-excessive-code-helpers)
;;(semantic-load-enable-semantic-debugging-helpers)
   ;; additional features for names completion, info. about tags & classes.
(require 'semantic-ia)
   ;; headers for gcc
(require 'semantic-gcc)
   ;; manually add addition header files.
;;(semantic-add-system-include "<path-to-header-files>" '<c/c++ mode>)


;; Org-Mode
  ;; load org
(require 'org-install)
  ;; auto load org-mode
(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
  ;; setup global keybinds for org-store-link/agenda/capture/iswitchb
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)


;; ido-mode
(require 'ido)

;; Python-Mode
  ;; bind RET to py-newline-and-indent
(add-hook 'python-mode-hook '(lambda () 
			       (define-key python-mode-map "\C-m" 'newline-and-indent)))
  ;; M-; to comment a region
  ;; iPython-mode
(setq py-install-directory "~/.emacs.d/python-mode")
(require 'pythom-mode)
(require 'ipython)
  ;; set up anything for auto-completion
(require 'anything)
;;(require 'anything-ipython)
;;(when (require 'anything-show-completion nil t)
;;   (use-anything-show-completion 'anything-ipython-complete
;;                                 '(length initial-pattern)))
(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(ido-mode (quote both) nil (ido)))
(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 )
